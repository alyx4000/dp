<!DOCTYPE html>
<html>
<style type="text/css">
        html, body {
            height: 100%;
            width: 100%;
            margin: 0;
            padding: 0;
            background-color: #000000;
            overflow: hidden;
            position: fixed;
        }
</style>

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <script src="https://www.youtube.com/iframe_api"></script>
</head>

<body>
    <div id="youTubePlayerDOM"></div>
</body>

<script type="text/javascript">

        var UNSTARTED = "UNSTARTED";
        var ENDED = "ENDED";
        var PLAYING = "PLAYING";
        var PAUSED = "PAUSED";
        var BUFFERING = "BUFFERING";
        var CUED = "CUED";

        var PendoSDK = window.PendoSDK;
    	var player;

        var timerId;

    	function onYouTubeIframeAPIReady() {

            PendoSDK.onYouTubeIFrameAPIReady();

    		player = new YT.Player('youTubePlayerDOM', {

                height: '100%',
    			width: '100%',

                events: {
    				onReady: function(event) { PendoSDK.onReady() },
    				onStateChange: function(event) { sendPlayerStateChange(event.data) },
    				onPlaybackQualityChange: function(event) { PendoSDK.onPlaybackQualityChange(event.data) },
    				onPlaybackRateChange: function(event) { PendoSDK.onPlaybackRateChange(event.data) },
    				onError: function(error) { PendoSDK.onError(error.data) },
    				onApiChange: function(event) { PendoSDK.onApiChange() }
    			},
                playerVars: <<injectedPlayerVars>>
    		});
    	}

    	function sendPlayerStateChange(playerState) {
            clearTimeout(timerId);

            switch (playerState) {
            	case YT.PlayerState.UNSTARTED:
                    sendStateChange(UNSTARTED);
                    return;

            	case YT.PlayerState.ENDED:
                    sendStateChange(ENDED);
                    return;

                case YT.PlayerState.PLAYING:
                    sendStateChange(PLAYING);
                    startSendCurrentTimeInterval();
                    sendVideoData(player);
                    return;

                case YT.PlayerState.PAUSED:
                    sendStateChange(PAUSED);
                    return;

                case YT.PlayerState.BUFFERING:
                    sendStateChange(BUFFERING);
                    return;

                case YT.PlayerState.CUED:
                    sendStateChange(CUED);
                    return;
            }

            function sendVideoData(player) {
                var videoDuration = player.getDuration();
                PendoSDK.onVideoDuration(videoDuration);
            }

            function sendStateChange(newState) {
                PendoSDK.onStateChange(newState)
            }

            function startSendCurrentTimeInterval() {
                timerId = setInterval(function() {
                    PendoSDK.onVideoCurrentTime( player.getCurrentTime() )
                    PendoSDK.onVideoLoadedFraction( player.getVideoLoadedFraction() )
                }, 100 );
            }
        }

        // JAVA to WEB functions

        function seekTo(startSeconds) {
        	player.seekTo(startSeconds, true);
        }

        function pauseVideo() {
        	player.pauseVideo();
        }
  
  	function stopVideo() {
        	player.stopVideo();
        }

        function playVideo() {
        	player.playVideo();
        }

        function loadVideo(videoId, startSeconds) {
            player.loadVideoById(videoId, startSeconds);
            PendoSDK.onVideoId(videoId);
        }

        function cueVideo(videoId, startSeconds) {
            player.cueVideoById(videoId, startSeconds);
            PendoSDK.onVideoId(videoId);
        }

        function mute() {
            player.mute();
        }

        function unMute() {
            player.unMute();
        }

        function setVolume(volumePercent) {
            player.setVolume(volumePercent);
        }

    </script>
</html>
